---
trigger:
  - master
pr:
  - none

resources:
  repositories:
    - repository: azTemplates
      type: github
      name: hmcts/azure-devops-templates
      ref: refs/heads/master
      endpoint: hmcts

parameters:

  - name: environments
    displayName: "Environments to run. Remove any you do not want to run on."
    type: object
    default:
    - name: sbox
    - name: dev
    - name: test
    #- name: stg
    #- name: prod

variables:
  - group: PIP-APIM-Common

stages:

  - ${{ each environment in parameters.environments }}:
    - stage: Validate${{environment.name}}
      displayName: "Validate ${{ environment.name }}"
      jobs:
        - template: pipeline/jobs/terraform-validate.yaml
          parameters:
            displayName: Validate ${{ environment.name }}
            subscription: 'DTS-SHAREDSERVICES-${{ upper(environment.name) }}'
            group: 'PIP-APIM-BUILD-${{ upper(environment.name) }}'
            environment: ${{ environment.name }}
            
    - stage: Plan${{environment.name}}
      displayName: "Plan ${{ environment.name }}"
      dependsOn: Validate${{environment.name}}
      condition: succeeded()
      jobs:
      - template: pipeline/jobs/terraform-plan.yaml
        parameters:
          displayName: "Plan ${{ upper(environment.name) }}"
          subscription: 'DTS-SHAREDSERVICES-${{ upper(environment.name) }}'
          group: 'PIP-APIM-BUILD-${{ upper(environment.name) }}'
          environment: ${{ environment.name }}


    - stage: Build${{environment.name}}
      displayName: "Apply ${{ environment.name }}"
      dependsOn: Plan${{environment.name}}
      condition: succeeded()
      variables:
        - group: 'PIP-APIM-BUILD-${{ upper(environment.name) }}'
      jobs:
        - template: pipeline/jobs/terraform-apply.yaml
          parameters:
            displayName: Build ${{environment.name}}
            subscription: 'DTS-SHAREDSERVICES-${{ upper(environment.name) }}'
        - template: pipeline/jobs/apply-policies.yaml
          parameters:
            displayName: Apply API Policies
            subscription: 'DTS-SHAREDSERVICES-${{ upper(environment.name) }}'
            environment: ${{ environment.name }}
            dependsOn:
              - TerraformApply

    - stage: Test${{environment.name}}
      displayName: "Test ${{ environment.name }}"
      dependsOn: Build${{environment.name}}
      pool:
        vmImage: 'ubuntu-18.04'
      variables:
        - group: 'PIP-APIM-BUILD-${{ upper(environment.name) }}'
      jobs:
        - template: pipeline/jobs/create-storage.yaml
          parameters:
            displayName: Create Storage for Test Results
            subscription: 'DTS-SHAREDSERVICES-${{ upper(environment.name) }}'

        - template: pipeline/jobs/export-keyvault.yaml
          parameters:
            displayName: Read APIM Subscription Key
            subscription: 'DTS-SHAREDSERVICES-${{ upper(environment.name) }}'

        - template: pipeline/jobs/test-unit.yaml
          parameters:
            displayName: Unit Test
            dependsOn:
            - CreateStorage
            - ExportKeyVault
            subscription: 'DTS-SHAREDSERVICES-${{ upper(environment.name) }}'
            subscriptionKey: $(subscriptionKey)
            storageContainer: $(storageContainer)
            variables:
              storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
              subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.pip-apim-sub-key']]

        - template: pipeline/jobs/test-acceptance.yaml
          parameters:
            displayName: Acceptance Test
            dependsOn:
              - CreateStorage
              - ExportKeyVault
            subscription: 'DTS-SHAREDSERVICES-${{ upper(environment.name) }}'
            subscriptionKey: $(subscriptionKey)
            storageContainer: $(storageContainer)
            variables:
              subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.pip-apim-sub-key']]
              storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
  
        - ${{ if eq(environment.name, 'test') }}:
          - template: pipeline/jobs/test-smoke.yaml
            parameters:
              displayName: Smoke Test
              dependsOn:
                - CreateStorage
                - ExportKeyVault
              subscription: 'DTS-SHAREDSERVICES-${{ upper(environment.name) }}'
              subscriptionKey: $(subscriptionKey)
              storageContainer: $(storageContainer)
              variables:
                storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
                subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.pip-apim-sub-key']]
  
        - ${{ if eq(environment.name, 'test') }}:
          - template: pipeline/jobs/test-functional.yaml
            parameters:
              displayName: Functional Test
              dependsOn:
              - CreateStorage
              - ExportKeyVault
              subscription: 'DTS-SHAREDSERVICES-${{ upper(environment.name) }}'
              subscriptionKey: $(subscriptionKey)
              storageContainer: $(storageContainer)
              variables:
                storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
                subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.pip-apim-sub-key']]
        
        - ${{ if or(eq(environment.name, 'sbox'), eq(environment.name, 'test')) }}:
          - template: pipeline/jobs/test-codequality.yaml
            parameters:
              displayName: Code Quality Test
              dependsOn:
              - UnitTest
