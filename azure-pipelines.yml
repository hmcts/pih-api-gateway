---
trigger:
  - master
pr:
  - none

resources:
  repositories:
    - repository: azTemplates
      type: github
      name: hmcts/azure-devops-templates
      ref: refs/heads/master
      endpoint: hmcts

parameters:

  - name: stage
    displayName: Stage to Run
    type: string
    default: ALL
    values:
      - SBOX
      - DEV
      - TEST
      - STG
      - NONPROD
      - ALL

  - name: environments
    type: object
    default:
    - name: sbox
      subscription: DTS-SHAREDSERVICES-SBOX
      group: PIP-APIM-BUILD-SBOX

    - name: dev
      subscription: DTS-SHAREDSERVICES-DEV
      group: PIP-APIM-BUILD-DEV

    - name: test
      subscription: DTS-SHAREDSERVICES-TEST
      group: PIP-APIM-BUILD-TEST

    #- name: stg
    #  subscription: DTS-SHAREDSERVICES-STG
    #  group: PIP-APIM-BUILD-STG

variables:
  - group: PIP-APIM-Common

stages:
  - stage: Validate
    jobs:
    - ${{ each environment in parameters.environments }}:
      - template: pipeline/jobs/terraform-validate.yaml
        parameters:
          displayName: Validate ${{ environment.name }}
          subscription: ${{ environment.subscription }}
          group: ${{ environment.group }}
          environment: ${{ environment.name }}

  - ${{ each environment in parameters.environments }}:
    - ${{ if or(contains('${{ parameters.stage }}', 'ALL'), and(ne('${{ environment.name }}', 'prod'),contains('${{ parameters.stage }}', 'NONPROD')), eq('${{ parameters.stage }}', upper('${{ environment.name }}')) }}:
      - stage: Plan${{environment.name}}
        displayName: "Plan ${{ environment.name }}"
        dependsOn: Validate
        condition: succeeded()
        jobs:
        - template: pipeline/jobs/terraform-plan.yaml
          parameters:
            displayName: "Plan ${{ upper(environment.name) }}"
            subscription: ${{ environment.subscription }}
            group: ${{ environment.group }}
            environment: ${{ environment.name }}


      - stage: Build${{environment.name}}
        displayName: "Apply ${{ environment.name }}"
        dependsOn: Plan${{environment.name}}
        condition: succeeded()
        variables:
          - group: ${{ environment.group }}
        jobs:
          - template: pipeline\jobs\apim-availability.yaml
            parameters:
              subscriptionName: ${{ environment.subscription }}
              apimName: "$(prefix)-$(product)-svc-$(environment)"
              resourceGroupName: "$(prefix)-$(product)-$(environment)-rg"
          
          - template: pipeline/jobs/terraform-apply.yaml
            parameters:
              displayName: Build ${{environment.name}}
              subscription: ${{ environment.subscription }}
          - template: pipeline/jobs/apply-policies.yaml
            parameters:
              displayName: Apply API Policies
              subscription: ${{ environment.subscription }}
              environment: ${{ environment.name }}
              dependsOn:
                - TerraformApply

      - stage: Test${{environment.name}}
        displayName: "Test ${{ environment.name }}"
        dependsOn: Build${{environment.name}}
        pool:
          vmImage: 'ubuntu-18.04'
        variables:
          - group: ${{ environment.group }}
        jobs:
          - template: pipeline/jobs/create-storage.yaml
            parameters:
              displayName: Create Storage for Test Results
              subscription: ${{ environment.subscription }}

          - template: pipeline/jobs/export-keyvault.yaml
            parameters:
              displayName: Read APIM Subscription Key
              subscription: ${{ environment.subscription }}

          - template: pipeline/jobs/test-unit.yaml
            parameters:
              displayName: Unit Test
              dependsOn:
              - CreateStorage
              - ExportKeyVault
              subscription: ${{ environment.subscription }}
              subscriptionKey: $(subscriptionKey)
              storageContainer: $(storageContainer)
              variables:
                storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
                subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.pip-apim-sub-key']]

          - ${{ if or(eq(environment.name, 'stg')) }}:
            - template: pipeline/jobs/test-acceptance.yaml
              parameters:
                displayName: Acceptance Test
                dependsOn:
                  - CreateStorage
                  - ExportKeyVault
                subscription: ${{ environment.subscription }}
                subscriptionKey: $(subscriptionKey)
                storageContainer: $(storageContainer)
                variables:
                  subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.pip-apim-sub-key']]
                  storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
    
          - ${{ if or(eq(environment.name, 'stg')) }}:
            - template: pipeline/jobs/test-smoke.yaml
              parameters:
                displayName: Smoke Test
                dependsOn:
                  - CreateStorage
                  - ExportKeyVault
                subscription: ${{ environment.subscription }}
                subscriptionKey: $(subscriptionKey)
                storageContainer: $(storageContainer)
                variables:
                  storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
                  subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.pip-apim-sub-key']]
    
          - ${{ if or(eq(environment.name, 'stg')) }}:
            - template: pipeline/jobs/test-functional.yaml
              parameters:
                displayName: Functional Test
                dependsOn:
                - CreateStorage
                - ExportKeyVault
                subscription: ${{ environment.subscription }}
                subscriptionKey: $(subscriptionKey)
                storageContainer: $(storageContainer)
                variables:
                  storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
                  subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.pip-apim-sub-key']]
          
          - ${{ if or(eq(environment.name, 'sbox'), eq(environment.name, 'test')) }}:
            - template: pipeline/jobs/test-codequality.yaml
              parameters:
                displayName: Code Quality Test
                dependsOn:
                - UnitTest
